{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"GEVPCo",
				"GEVPcorrAll"
			],
			[
				"_Model",
				"_ModelParams"
			],
			[
				"_Mode",
				"_ModelParams"
			],
			[
				"size",
				"sizeof"
			],
			[
				"pack_el",
				"pack_element"
			],
			[
				"pack",
				"pack_element"
			],
			[
				"pack_element",
				"pack_element_hlp"
			],
			[
				"type",
				"typename"
			],
			[
				"static",
				"static_assert"
			],
			[
				"tuple",
				"tuple_size"
			],
			[
				"c",
				"class	class-..-(class)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/*\n * Fitter.hpp\n *\n *  Created on: Jun 10, 2013\n *      Author: Thibaut Metivet\n */\n\n#ifndef FITTER_HPP_\n#define FITTER_HPP_\n\n#include \"ModelParameter.hpp\"\n#include \"FitResult.hpp\"\n#include \"FitModel.hpp\"\n#include <cmath>\n#include <type_traits>\n\nnamespace LQCDA {\n\n	template<class XT, class YT>\n	class Fitter\n	{\n	private:\n		typedef FitModel<XT, YT> Model;\n\n		Model * _Model;\n		std::vector<ModelParameter> _ModelParams;\n\n	public:\n		Fitter(FitModel<XT, YT>* model): _Model(model), _ModelParams() {\n			_ModelParams.reserve(_Model->NParams());\n			for(int n = 0; n < _Model->NParams(); ++n) {\n				std::ostringstream oss;\n				oss<<\"p\"<<n;\n				_ModelParams.push_back(ModelParameter(n, oss.str()));\n			}\n		}\n\n		unsigned int NParams() const { return _Model->NParams(); }\n\n		void SetInitParamValue(unsigned int i, double p) {\n			std::assert(i < NParams());\n			_ModelParams[i].SetValue(p);\n		}\n		void SetInitParamError(unsigned int i, double e) {\n			std::assert(i < NParams());\n			_ModelParams[i].SetError(e);\n		}\n		void SetParamLimits(unsigned int i, double low, double up) {\n			std::assert(i < NParams());\n			_ModelParams[i].SetLimits(low, up);\n		}\n		void RemoveParamLimits(unsigned int i) {\n			std::assert(i < NParams());\n			_ModelParams[i].RemoveLimits();\n		}\n		void SetParamLowerLimit(unsigned int i, double low) {\n			std::assert(i < NParams());\n			_ModelParams[i].SetLowerLimit(low);\n		}\n		void SetParamUpperLimit(unsigned int i, double up) {\n			std::assert(i < NParams());\n			_ModelParams[i].SetUpperLimit(up);\n		}\n\n		FitResult Fit(const FitData<XT, YT> * data) const { return DoFit(data); }\n\n	private:\n		virtual FitResult DoFit(const FitData<XT, YT> * data) =0;\n\n	};\n    \n    template<class XT, class YT, class Minimizer>\n    class Chi2Fitter: public Fitter<XT, YT>\n    {\n    private:\n		static const double InitError;\n\n	template<class DataT, class XT>\n	static Enable_if<std::is_floating_point<XT>::value, void> SetDummyParameters(ModelParameters& p, Data<DataT, XT>* data);\n	template<class DataT, class XT>\n	static Enable_if<!std::is_floating_point<XT>::value, void> SetDummyParameters(ModelParameters& p, Data<DataT, XT>* data);\n	\n	template<class DataT, class XT>\n	static ModelParameters GetInitialFitParameters(Data<DataT, XT>* data, Model<DataT, XT>* model);\n	template<class DataT, class XT>\n	static ModelParameters GetInitialFitParameters(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams);\n	template<class DataT, class XT>\n	static ModelParameters GetInitialFitParameters(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams, const std::vector<double>& initErrors);\n\n    public:\n		template<class DataT, class XT>\n		static Result<DataT, XT> Fit(Data<DataT, XT>* data, Model<DataT, XT>* model);\n		template<class DataT, class XT>\n		static Result<DataT, XT> Fit(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams);\n		template<class DataT, class XT>\n		static Result<DataT, XT> Fit(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams, const std::vector<double>& initErrors);\n\n	private:\n		FitResult DoFit();\n\n    };\n\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    const double Fitter<Fcn, Minimizer>::InitError = 0.1;\n\n// ----------------------------------------------------------------------\n// Fitter static Fit member functions\n// ----------------------------------------------------------------------\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    Result<DataT, XT> Fitter<Fcn, Minimizer>::Fit(Data<DataT, XT>* data, Model<DataT, XT>* model)\n    {\n	Fcn<DataT, XT> F(data, model);\n	LQCDDebug(3)<<\"\\nMinimization function initialized!\\n\";\n\n	ModelParameters init_par = GetInitialFitParameters(data, model);\n	LQCDDebug(2)<<\"Initial parameters : \"<<'\\n'<<init_par;\n	\n        // Minimize F\n	ModelParameters result = Minimizer<Fcn<DataT, XT>>::Minimize(F, init_par);\n	\n	return Result<DataT, XT>(data, model, result);\n    }\n\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    Result<DataT, XT> Fitter<Fcn, Minimizer>::Fit(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams)\n    {\n	Fcn<DataT, XT> F(data, model);\n	LQCDDebug(3)<<\"\\nMinimization function initialized!\\n\";\n\n	ModelParameters init_par = GetInitialFitParameters(data, model, initParams);\n	LQCDDebug(2)<<\"Initial parameters : \"<<'\\n'<<init_par;\n	\n        // Minimize F\n	ModelParameters result = Minimizer<Fcn<DataT, XT>>::Minimize(F, init_par);\n	\n	return Result<DataT, XT>(data, model, result);\n    }\n\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    Result<DataT, XT> Fitter<Fcn, Minimizer>::Fit(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams, const std::vector<double>& initErrors)\n    {\n	Fcn<DataT, XT> F(data, model);\n	LQCDDebug(3)<<\"\\nMinimization function initialized!\\n\";\n\n	ModelParameters init_par = GetInitialFitParameters(data, model, initParams, initErrors);\n	LQCDDebug(2)<<\"Initial parameters : \"<<'\\n'<<init_par;\n	\n        // Minimize F\n	ModelParameters result = Minimizer<Fcn<DataT, XT>>::Minimize(F, init_par);\n	\n	return Result<DataT, XT>(data, model, result);\n    }\n\n// ----------------------------------------------------------------------\n// Fitter static GetInitialFitParameters member functions\n// ----------------------------------------------------------------------\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    Enable_if<std::is_floating_point<XT>::value, void> Fitter<Fcn, Minimizer>::SetDummyParameters(ModelParameters& p, Data<DataT, XT>* data)\n    {\n	if(data->HaveXCorrelation()) {\n	    int nData = data->nData();\n// Add \"pseudo-parameters\" to deal with cases of x-correlation in dimension k\n	    if(data->IsCorrelatedXDim(0)) {\n		for(int i=0; i<nData; ++i) {\n// Name for parameter x_ik\n		    std::ostringstream oss;\n		    oss<<\"x\"<<i;\n// Add parameter p\n		    p.Add(oss.str(), data->x(i), fabs(data->x(i)) * InitError);\n		}\n	    }\n	}\n    }\n    \n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    Enable_if<!std::is_floating_point<XT>::value, void> Fitter<Fcn, Minimizer>::SetDummyParameters(ModelParameters& p, Data<DataT, XT>* data)\n    {\n	if(data->HaveXCorrelation()) {\n	    int nxDim = data->nxDim();\n	    int nData = data->nData();\n// Add \"pseudo-parameters\" to deal with cases of x-correlation in dimension k\n	    for(int k=0; k<nxDim; ++k) {\n		if(data->IsCorrelatedXDim(k)) {\n		    for(int i=0; i<nData; ++i) {\n// Name for parameter x_ik\n			std::ostringstream oss;\n			oss<<\"x\"<<i<<k;\n// Add parameter p\n			p.Add(oss.str(), data->x(i)[k], fabs(data->x(i)[k]) * InitError);\n		    }\n		}\n	    }\n	}\n    }\n    \n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    ModelParameters Fitter<Fcn, Minimizer>::GetInitialFitParameters(Data<DataT, XT>* data, Model<DataT, XT>* model)\n    {\n	ModelParameters result(model->NbOfParameters());\n	SetDummyParameters(result, data);\n	return result;\n    }\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    ModelParameters Fitter<Fcn, Minimizer>::GetInitialFitParameters(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams)\n    {\n	ModelParameters result(initParams);\n	SetDummyParameters(result, data);\n	return result;\n    }\n    template<template<class, class> class Fcn,\n	     template<class> class Minimizer>\n    template<class DataT, class XT>\n    ModelParameters Fitter<Fcn, Minimizer>::GetInitialFitParameters(Data<DataT, XT>* data, Model<DataT, XT>* model, const std::vector<double>& initParams, const std::vector<double>& initErrors)\n    {\n	ModelParameters result(initParams, initErrors);\n	SetDummyParameters(result, data);\n	return result;\n    }\n\n\n}\n\n#endif	// FITTER_HPP_\n",
			"file": "include/Fitter.hpp",
			"file_size": 8269,
			"file_write_time": 1389691139000000,
			"settings":
			{
				"buffer_size": 8214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Function.hpp",
			"settings":
			{
				"buffer_size": 357,
				"line_ending": "Unix",
				"name": "/*"
			}
		},
		{
			"file": "include/FitModel.hpp",
			"settings":
			{
				"buffer_size": 2274,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n * Point.hpp\n *\n *  Created on: Jan 22, 2014\n *      Author: Thibaut Metivet\n */\n\n#ifndef POINT_HPP\n#define POINT_HPP\n\n #include <utility>\n\n template<class XT, class YT>\n class Point : private std::pair<XT, YT>\n {\n public:\n 	typedef YT y_type;\n 	typedef std::remove_reference<XT>::type x_type;\n\n 	Point(const x_type& x, const y_type& y): std::pair<<XT, YT>(x, y) {}\n\n 	const x_type& x() const { return first; }\n 	const y_type& y() const { return second; }\n };\n\n#endif // POINT_HPP",
			"file": "include/Point.hpp",
			"file_size": 241,
			"file_write_time": 1390406877000000,
			"settings":
			{
				"buffer_size": 483,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"Git:S",
				"Git: Status"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"Pac",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/thibaut/workspace/LQCDAnalysis/include/MetaProgUtils.hpp",
		"/home/thibaut/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/thibaut/.config/sublime-text-2/Packages/User/SublimeClang.sublime-settings",
		"/home/thibaut/.config/sublime-text-2/Packages/C++ Snippets/reference.md",
		"/home/thibaut/.config/sublime-text-2/Packages/SideBarEnhancements/messages/11.13.2012.1305.0.txt",
		"/home/thibaut/workspace/LQCDUtils/include/GEVPPlateau.hpp",
		"/home/thibaut/workspace/LQCDAnalysis/include/SizeInfo.hpp",
		"/home/thibaut/workspace/LQCDAnalysis/include/FunctionParameter.hpp",
		"/home/thibaut/workspace/LQCDAnalysis/include/model_parameter.hpp~",
		"/home/thibaut/workspace/RhoPiPi/Programs/mean/mean.cpp",
		"/media/Transcend/Data/LQCD/RhoPiPi/48_32_3.31_ud-0.09756_s-0.04/twopart/extract",
		"/home/thibaut/workspace/tests/mean.cpp",
		"/home/thibaut/workspace/tests/test_templates.cpp",
		"/home/thibaut/.config/sublime-text-2/Packages/User/add_new_source_file_snippet.py",
		"/home/thibaut/.config/sublime-text-2/Packages/User/add_date.py",
		"/home/thibaut/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/thibaut/workspace/LQCDAnalysis/include/FitFcn.hpp",
		"/home/thibaut/.config/sublime-text-2/Packages/User/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"namespace"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "include/Fitter.hpp",
					"settings":
					{
						"buffer_size": 8214,
						"regions":
						{
						},
						"selection":
						[
							[
								342,
								342
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "include/Function.hpp",
					"settings":
					{
						"buffer_size": 357,
						"regions":
						{
						},
						"selection":
						[
							[
								154,
								154
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"auto_name": "/*",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/FitModel.hpp",
					"settings":
					{
						"buffer_size": 2274,
						"regions":
						{
						},
						"selection":
						[
							[
								452,
								452
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "include/Point.hpp",
					"settings":
					{
						"buffer_size": 483,
						"regions":
						{
						},
						"selection":
						[
							[
								213,
								213
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 112.0
	},
	"output.exec":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"model_mo",
				"model_modified_luscher.cpp"
			],
			[
				"fitfc",
				"include/FitFcn.hpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 203.0,
	"status_bar_visible": true
}
